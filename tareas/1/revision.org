#+title: Revisi√≥n de la tarea 1
#+options toc:nil num:nil

* Criterios de calificaci√≥n

- Documentaci√≥n :: 2 puntos
- Programa funcional :: 2 puntos
- Planteamiento resuelto satisfactoriamente :: 3 puntos
- Aplicaci√≥n de los principios vistos en clase :: 3 puntos

* Problema /El elevador/

** Diego Armenta
- Documentaci√≥n :: [[./ArmentaDiego/LEEME.txt][LEEME.txt]]
- C√≥digo :: [[./ArmentaDiego/ejercicio.py][ejercicio.py]]
- Lenguaje :: Python
- Comentarios ::
  - Veo que usas una forma de crear los hilos distinta a la que les
    ense√±√© en casa, m√°s limpia en tanto orientaci√≥n a objetos, en que
    cada clase hereda de =threading.Thread=. ¬°Muy bien! ‚ò∫
  - El problema que describes en la documentaci√≥n puede deberse a que
    no has terminado de interiorizar el modelo de sincronizaci√≥n en
    que les insist√≠: Si est√°s haciendo algo como:
    #+begin_src python
      while (self.pd != self.e.pa):
	  time.sleep(1)
	  print(self.id, "Viajando en elevador")
    #+end_src
    me da a ver claramente que no est√°s usando mecanismos de
    sincronizaci√≥n entre las personas y el elevador ‚Äî ¬°que es el punto
    principal del ejercicio!
  - Este ejercicio se resuelve correctamente con un par de
    se√±alizaciones: T√≠picamente, las personas se duermen
    (=sem.acquire()=) esperando a que llegue el elevador a su piso,
    posiblemente en un arreglo por cada piso; el elevador va lanzando
    =release()= al n√∫mero de personas para las cuales haya capacidad
    de carga.
- Calificaci√≥n :: 2 + 2 + 1.5 + 1.5 = *7*

* Problema /Los alumnos y el asesor/

** Daniel Cruz
- Documentaci√≥n :: [[./CruzDaniel/Documentacion.md][Documentacion.md]]
- C√≥digo :: [[./CruzDaniel/Tarea1.py][Tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Muy buena documentaci√≥n! Gracias por facilitarme la comprensi√≥n
    de tu l√≥gica.
  - Me gusta que hayas tomado los paralelismos que sin duda hay con el
    otro programa que desarrollamos.
  - De acuerdo con lo que dices, hay m√°s de un punto de tu c√≥digo en
    que el actor ‚Äúequivocado‚Äù emite cierta cadena. Pero me parece que
    la l√≥gica general es correcta.
  - Como √∫nico comentario de estilo: Tanto en tu c√≥digo como en la
    documentaci√≥n hablas del uso de un =multiplex=. El uso que les
    das, sin embargo, es de se√±alizaci√≥n: El alumno hace los
    =acquire()= y el profesor hace los =release()=. Esto es, a fin de
    cuentas, por lo de la l√≠nea inmediata anterior que menciono: El
    profesor dice, =Alumno se va ...= (que deber√≠a haberlo dicho el
    alumno), y podr√≠a verse como que carga al alumno y lo deposita del
    lado de afuera de la puerta üòâ
    - Yo sugerir√≠a que, tras plantear la pregunta, el alumno esperara
      a una se√±alizaci√≥n, y tras recibir el =release()= por parte del
      profesor, el alumno fuera quien libere =mutex_orden= (e
      imprimiera =Alumno se va ...=).
- Calificaci√≥n :: 2 + 2 + 2 + 2 = *8*

** Luis Quintanar
- Documentaci√≥n :: [[./LuisQuintanar/README.txt][README.txt]]
- C√≥digo :: [[./LuisQuintanar/alumnos_y_asesor.py][alumnos_y_asesor.py]]
- Lenguaje :: Python
- Comentarios ::
  - A nivel estil√≠stico en tu c√≥digo: Evita escribir tu comentario
    al t√©rmino de la l√≠nea de la que est√°s hablando, se considera
    mucho m√°s legible poner el comentario en la l√≠nea inmediata
    anterior. Esto es, en vez de:
    #+begin_src python
      if len(alumnos_sentados) < numero_de_sillas: 	# Checa si hay asientos disponibles
    #+end_src
    es m√°s f√°cil leer:
    #+begin_src python
      # Checa si hay asientos disponibles
      if len(alumnos_sentados) < numero_de_sillas:
    #+end_src
  - El comportamiento "raro" en Windows puede deberse a que en
    sistemas derivados de CP/M, el fin de l√≠nea es un caracter
    compuesto (caracteres CR+LF), en tanto que en Unix es un s√≥lo
    caracter (LF). Varias bibliotecas de bajo nivel causan la "purga"
    del buffer de texto al detectar fin de l√≠nea ‚Äî Y este manejo puede
    causar que se porten diferente dependiendo del sistema.
  - Al verificar si hay lugar para pasar y sentarte, est√°s abriendo la
    posibilidad de una condici√≥n de carrera (¬ørecuerdas TOCTTOU? ¬øTime
    Of Check To Time Of Use?), podr√≠an dos alumnos decidir al mismo
    tiempo que pueden entrar, y uno de ellos quedar√≠a bastante
    inc√≥modo. Adem√°s, si tienes algo como:
    #+begin_src python
      while True:
	# (...)
	if condicion:
	  # Pasa y haz tus preguntas
	else:
	  # Date vuelta y regresa por donde viniste
          print("Ya no hay lugar")
    #+end_src
    tienes una espera activa (aunque sea relativamente sencilla). Lo
    que tendr√≠as que hacer es dejar al alumno dormido frente a la
    puerta, y /asumir que ser√° exitoso/ cuando le toque.
    - Bastar√≠a con decir:
      #+begin_src python
	entra_cuarto = Semaphore(num_sillas)
	while True:
	  # (...)
	  entra_cuarto.acquire()
          # Pasa y haz tus preguntas
      #+end_src
    - Adem√°s de que te ahorrar√≠a preocuparte siquiera de qu√© hacer si
      no hay lugar
  - Implementaste correctamente la sincronizaci√≥n necesaria para
    entrar al cuarto, pero todo el comportamiento relativo a las
    preguntas qued√≥ dentro de la l√≥gica del profesor. El manejo de
    =tenga_dudas= tendr√≠a que estar dentro de =alumnos()=, y √©ste es
    el que deber√≠a decidir cu√°ndo irse.
- Calificaci√≥n :: 2 + 2 + 1.5 + 2 = *7.5*

** Luis Javier Montiel y Carolina Rodr√≠guez
- Documentaci√≥n :: [[./MontielJavier-RodriguezCarolina/README.md][README.md]]
- C√≥digo :: [[./MontielJavier-RodriguezCarolina/profe_alumnos.py][profe_alumnos.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Vaya! ¬°Alguien que me hace caso y provee un =.gitignore=! Me hace
    tener un poco de f√© en la humanidad üòâ
  - Muy buena implementaci√≥n. Bastante clara de leer, suficiente y
    bien armada.
- Calificaci√≥n :: 2 + 2 + 3 + 3 = *10*

** Jos√© Nava
- Documentaci√≥n :: [[./NavaJose/documentacion.txt][documentacion.txt]]
- C√≥digo :: [[./NavaJose/alumnos_asesor.py][alumnos_asesor.py]]
- Lenguaje :: Python
- Comentarios ::
  - No hay interacci√≥n real entre los alumnos y el profesor ‚òπ
  - Si sigues el flujo de tu programa, primero se ejecuta (y finaliza)
    la funci√≥n =profesor()=, y luego se lanzan los hilos de los alumnos
    - El profesor maneja como un mutex su... ¬øsecci√≥n cr√≠tica? pero no
      hay ning√∫n tipo de interacci√≥n con los dem√°s
    - Los alumnos usan un mutex para agregarse e irse sumando a la
      variable =alumnos=, pero a esas alturas, el profesor ya se fue
    - Y, por alguna raz√≥n (‚ÄΩ), los alumnos lanzan a un nuevo profesor
      ‚Äì /Dos/ veces.
    - Adem√°s, si bien usan el mutex para irse sumando en la variable
      =alumnos=, todos los alumnos hacen que =alumnos = 0= al ir
      finalizando... Y antes de llamar una √∫ltima vez a =profesor()
  - No puedo considerar esta soluci√≥n como suficiente ‚òπ
- Calificaci√≥n :: 2 + 1 + 1 + 1 = *5*

** Francine Ochoa
- Documentaci√≥n :: [[./OchoaFrancine/Tarea 1 asesor.pdf][Tarea 1 asesor.pdf]]
- C√≥digo :: [[./OchoaFrancine/asesor y alumnos.py][asesor y alumnos.py]]
- Lenguaje :: Python
- Comentarios ::
  - A nivel estil√≠stico en tu c√≥digo: Evita escribir tu comentario
    al t√©rmino de la l√≠nea de la que est√°s hablando, se considera
    mucho m√°s legible poner el comentario en la l√≠nea inmediata
    anterior. Esto es, en vez de:
    #+begin_src python
      mutex_atendido.release()#profe se desocupa
    #+end_src
    es m√°s f√°cil leer:
    #+begin_src python
      # profe se desocupa
      mutex_atendido.release()
    #+end_src
  - Modelas al planteamiento de que al profesor le gusta dormir
    /fuera/ de los hilos. Esto es, =Profe despierta.= es impreso desde
    tu hilo principal, antes de lanzar al profesor siquiera. Esto
    significa que el profesor no va a poder nunca volver a dormir ‚òπ
  - La lista =alumno_preguntas= no est√° protegida de accesos
    concurrentes; todos los alumnos agregan a √©sta sus dudas, y el
    profesor las va sacando una a una. S√≠, Python nos ayuda siendo tan
    malo para resolver concurrencia real, pero... ¬°deber√≠as
    protegerla!
  - Detalle idiom√°tico: En Python, no necesitas crear una variable
    aparte para iterar sobre una funci√≥n cierto n√∫mero de veces. Al
    final de tu c√≥digo, en vez de:
    #+begin_src python
    k=1
    while k<alumnos_esperando:
        # (...)
	k += 1
    #+end_src
    es mucho m√°s frecuente hacer:
    #+begin_src python
    for k in range(alumnos_esperando):
        # (...)
    #+end_src
  - Calificaci√≥n: 2 + 2 + 3 + 1 = *9*

* Problema /De gatos y ratones/

** David Guerrero y Adolfo Marcelo
- Documentaci√≥n :: [[./GuerreroDavid-MarceloAdolfo/Descripci√≥n.txt][Descripci√≥n.txt]]
- C√≥digo :: [[./GuerreroDavid-MarceloAdolfo/Tarea1.py][Tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Bien identificado! ‚Äî En este problema, a muchos no se les ocurre
    emplear el patr√≥n apagador.
  - Siendo formales, la l√≥gica est√° /casi/ al rev√©s: Los ratones son
    los que revisan si hay gatos en el cuarto
    - Y, de haberlos, son los ratones quienes indican que se los
      comieron; los gatos pasan por la vida sin pensar siquiera en los
      ratones
    - Pero la doy por v√°lida, porque la l√≥gica global es la
      misma... aunque construida del lado opuesto
  - ¬°Me gusta que presenten el recuento final de ratones atrapados!
  - Si acaso, me parece que la estructura del c√≥digo est√° un poco
    revuelta; se ve que comenzaron desarrollando de una manera y
    fueron extrayendo l√≥gica hacia funciones derivadas, aunque dejaron
    rastros (p.ej. la declaraci√≥n de variables globales que no usan en
    algunas funciones, como =gatoEntrando= y =ratonEntrando=).
  - Me parece que el uso del multiplex =animales= y del arreglo de
    sem√°foros =platos= es redundante; son del mismo tama√±o, y siempre
    que operan sobre uno, operan sobre el otro tambi√©n.
- Calificaci√≥n :: 2 + 2 + 3 + 3 = *10*

* Problema /Santa Claus/

  *Nota* Recib√≠ la siguiente entrega; la alumna no asisti√≥ a la clase
  en que resolvimos ese problema, pero cuando le pregunt√© al respecto,
  me dijo que resolver√≠a otro problema (y lo hizo). Esta entrega la
  comento, aunque no reciba calificaci√≥n.

** Francine Ochoa
- Documentaci√≥n :: [[./OchoaFrancine/Tarea 1.pdf][Tarea 1.pdf]]
- C√≥digo :: [[./OchoaFrancine/santa.py][santa.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Buena resoluci√≥n! Se nota que la implementaste independiente de
    la versi√≥n vista en clase (hay algunas diferencias de l√≥gica
  - El problema se ejecuta una sola vez: Podr√≠amos decir que cada elfo
    (de 200 que creaste) construye un s√≥lo regalo, y los nueve renos
    con Santa hacen un √∫nico viaje.
    - ¬øy qu√© pasa con los regalos que fueron creados despu√©s de la
      entrega?
    - Sugiero que =SantaClaus()=, =Renos()= y =Elfos()= tengan un
      =while True:= para mantenerlos vivos para siempre, ¬°como el
      esp√≠ritu navide√±o! üòâ Aunque tendr√≠as que revisar la l√≥gica para
      devolver el estado al inicial al terminar cada ciclo.
  - En general, la sincronizaci√≥n fue bien manejada. S√≥lo me llam√≥ la
    atenci√≥n que no proteges expl√≠citamente de acceso concurrente a
    =regalo_entregado=, y que los renos lanzan nueve veces la
    se√±alizaci√≥n =despertar_santa= (una por cada individuo, deber√≠a
    hacerlo √∫nicamente uno de ellos)
    - ¬øO es que tiene que estar despierto muy despierto bien
      despierto? ¬°Una buena taza de caf√©!

* Problema /El cruce del r√≠o/

** Ren√© V√°zquez y Ad√°n Guevara
- Documentaci√≥n :: [[./VazquezRene-GuevaraAdan/Documentacion.txt][Documentacion.txt]]
- C√≥digo :: [[./VazquezRene-GuevaraAdan/Tarea1.py][Tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Vaya! ¬°Alguien que me hace caso y provee un =.gitignore=! Me hace
    tener un poco de f√© en la humanidad üòâ
  - Pero... El c√≥digo que presentan no es Python v√°lido ‚òπ
    - Mezclan espacios y tabuladores. Python marca errores y se niega
      a ejecutar:
      #+begin_src text
	$ python3 Tarea1.py 
	  File "Tarea1.py", line 29
	    mutex_canoa.release()                
						^
	TabError: inconsistent use of tabs and spaces in indentation
      #+end_src
    - Tienen algunos errores de dedazo importantes, como usar a veces
      =acquiere()= donde debe decir =acquire()=
    - Dedazos en nombres de variable (=serfQueue= vs. =SerfQueue=:
      Python es sensible a may√∫sculas)
  - Manejan correctamente la l√≥gica y se√±alizaci√≥n principal, pero
    tanto =hacker()= como =serf()= verifican el caso de que sean dos y
    dos. ¬øNo puede presentarse aqu√≠ una condici√≥n de carrera?
    - Aunque la l√≥gica que implementan es distinta: con 2 y 2,
      =hacker()= libera a =hackerQueue= y a =serfQueue=, pero en el
      mismo caso, =serf()= s√≥lo libera a =hackerQueue=.
- Calificaci√≥n :: 2 + 0 + 2 + 1.5 = *5.5*

* Problema /Intersecci√≥n de caminos/

** Daniel Zanabria
- Documentaci√≥n :: [[./ZanabriaDaniel/README.md][README.md]]
- C√≥digo :: [[./ZanabriaDaniel/tarea1.py][tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - A nivel estil√≠stico en tu c√≥digo: Evita escribir tu comentario
    al t√©rmino de la l√≠nea de la que est√°s hablando, se considera
    mucho m√°s legible poner el comentario en la l√≠nea inmediata
    anterior. Esto es, en vez de:
    #+begin_src python
      semaf.acquire() # Los carros est√°n ocupando la calle esperando
    #+end_src
    es m√°s f√°cil leer:
    #+begin_src python
      # Los carros est√°n ocupando la calle esperando
      semaf.acquire()
    #+end_src
  - Cae siempre en bloqueo mutuo ‚òπ
  - Por facilidad de seguimiento, y para ayudarte a depurar, recuerda
    el principio *DRY*: /Don't Repeat Yourself/. En ambas funciones,
    verificas el estado de =color=, y llevas a cabo acciones _muy_
    similares. Considera el siguiente cuerpo para tu funci√≥n
    =semaforo():
    #+begin_src python
      colores = ['rojo', 'verde']
      def semaforo(semaf, color): # 
	  while True:
	      print("semaforo en ", colores[color])
	      semaf.acquire()
	      time.sleep(5)
	      siguiente_color = (color + 1) % len(colores)
	      print("pasando a color ", colores[ siguiente_color ])
	      color = siguiente_color
	      semaf.release()
    #+end_src
    El resultado de la ejecuci√≥n ser√≠a exactamente el mismo, y tienes
    la libertad de a√±adir colores adicionales. Y si quieres modificar
    el comportamiento, s√≥lo hay que hacerlo una vez.
  - El planteamiento indicaba que es ‚Äúun cruce de caminos sin
    se√±alamiento vial‚Äù ‚Äî Lo que busca este problema es que manejes la
    sincronizaci√≥n entre los coches que vayan llegando
    - (pero... sigamos leyendo c√≥digo, a ver si puedo encontrar qu√©
      problema tiene tu implementaci√≥n que se atora tan exitosamente)
  - Inicializas =semaf= y =mutex= con =Semaphore(0)=, pero en ambos
    dices en el comentario, =# Inicializamos sem√°foro en 1=. En
    efecto, si =semaf= es inicializado a 1, tu =semaforo()= s√≠ va
    alternandose.
    - Pero =carro()= genera una excepci√≥n: =UnboundLocalError: local
      variable 'cola_carros' referenced before assignment=. Nunca la
      inicializaste; probemos poni√©ndola como 0 antes del =while
      True=. ¬øQu√© es loq ue buscas representar con ese entero? No la
      reportas en ning√∫n momento, s√≥lo la haces crecer y decrecer
      aleatoriamente...
  - Tu =mutex= es innecesario: S√≥lo tienes un hilo para =carro()=, y
    no hay nunca contra qui√©n competir.
  - =carro()= sigue cayendo en bloqueo mutuo...
- Calificaci√≥n :: 2 + 1 + 1.5 + 1.5 = *6*

** Erik Zepeda
- Documentaci√≥n :: [[./ZepedaErik/Tarea1/Detalles_Tarea.txt][Detalles_Tarea.txt]]
- C√≥digo :: [[./ZepedaErik/Tarea1/Tarea_1_ErikZepeda_Carros.py][Tarea_1_ErikZepeda_Carros.py]]
- Lenguaje :: Python
- Comentarios ::
  - A nivel estil√≠stico en tu c√≥digo: Evita escribir tu comentario
    al t√©rmino de la l√≠nea de la que est√°s hablando, se considera
    mucho m√°s legible poner el comentario en la l√≠nea inmediata
    anterior. Esto es, en vez de:
    #+begin_src python
    for dir in direcciones:  # se agregaran carros en las 4 direcciones posibles
    #+end_src
    es m√°s f√°cil leer:
    #+begin_src python
    # se agregaran carros en las 4 direcciones posibles
    for dir in direcciones:
    #+end_src
  - ¬°No te disculpes por hacer las cosas bien! Me parece perfecto que
    crearas una clase =Car= que heredara de =Thread=. ¬°M√°s limpio que
    lo que yo les ense√±√©! üòâ Requiere, s√≠, comprender un poco de POO,
    pero si ya lo tienes... ¬°Aprov√©chalo!
  - No entiendo por qu√© inicializas =semaforo= a 5. Lo est√°s usando
    como un mutex para el √°rea completa de cruce... Pero esto
    significa que /no m√°s de 5 autos/ podr√≠an avanzar al mismo tiempo,
    ¬øno?
    - Esto limita la cantidad de choques simult√°neos, no los evita üòâ
      #+begin_src text
	(...)
	[INFO] (Hilo 4) Avanza y sale carro 4 con direccion: Derecha a izquierda
	[INFO] (Hilo 8) El carro 8 tiene direccion: Abajo a arriba
	[INFO] (Hilo 3) Avanza y sale carro 3 con direccion: Derecha a izquierda
	[INFO] (Hilo 9) El carro 9 tiene direccion: Abajo a arriba
	[INFO] (Hilo 6) Avanza y sale carro 6 con direccion: Derecha a izquierda
	[INFO] (Hilo 8) Avanza y sale carro 8 con direccion: Abajo a arriba
	[INFO] (Hilo 5) Avanza y sale carro 5 con direccion: Derecha a izquierda
	(...)
      #+end_src
      ¬°Pasaron a la vez autos en direcciones que se cruzan! Sin
      embargo, inicializando tu sem√°foro con 1:
      #+begin_src text
	[INFO] (Hilo 1) El carro 1 tiene direccion: Izquierda a derecha
	[INFO] (Hilo 1) Avanza y sale carro 1 con direccion: Izquierda a derecha
	[INFO] (Hilo 2) El carro 2 tiene direccion: Derecha a izquierda
	[INFO] (Hilo 2) Avanza y sale carro 2 con direccion: Derecha a izquierda
	[INFO] (Hilo 3) El carro 3 tiene direccion: Derecha a izquierda
	[INFO] (Hilo 3) Avanza y sale carro 3 con direccion: Derecha a izquierda
	[INFO] (Hilo 4) El carro 4 tiene direccion: Derecha a izquierda
	[INFO] (Hilo 4) Avanza y sale carro 4 con direccion: Derecha a izquierda
      #+end_src
  - Claro, no entraste en el refinamiento, con el que podr√≠as modelar
    el cruce como cuatro sem√°foros (uno para cada cuadrante), y
    permitir que los autos se cruzaran en direcciones no-rivales. Pero
    es √∫nicamente eso, un refinamiento üòâ
- Calificaci√≥n :: 2 + 2 + 2 + 2 = *8*
